install.packages("r2pdf")
install.packages("R2pdf")
install.packages("Rd2pdf")
load_all(".")
devtools::load_all(".")
install.packages("devtools")
devtools::load_all(".")
.libPaths()
lapply(.libPaths(), dir)
devtools::load_all(".")
hello
hello()
?gsub
?typeof
devtools::use_package("jsonlite")
library(data.table)
library(httr)
library(jsonlite)
person()
person("Gabriel", "Bergeron", "gabriel.bergeron3@usherbrooke.ca", "aut")
person("Gabriel", "Bergeron", email = "gabriel.bergeron3@usherbrooke.ca", "aut")
person(given = "Gabriel", family = "Bergeron", email = "gabriel.bergeron3@usherbrooke.ca", role = "aut")
Authors@R: person(given = "Gabriel", family = "Bergeron", email = "gabriel.bergeron3@usherbrooke.ca", role = "aut")
citation("mangal")
devtools::document()
?hello
?mangal
package?mangal
?mangal
library(mangal)
?hello
devtools::document()
library(mangal)
?hello
?mangal
hello()
hello(1)
browseVignettes("httr")
devtools::use_vignette("test_vignette")
devtools::use_testthat()
library(testthat)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 10)
expect_identical(10, 10 + 1e-7)
expect_match("Testing is fun!", "Testing")
expect_match("Testing is fun!", "Testing", all = T)
expect_match("Testing is fun!", "Testing", all = F)
expect_match("Testing is fun!", "Testing", fixed = F)
a <- list(1:10, letters)
a
str(a)
expect_warning(log(-1))
log(-1)
expect_warning(log(0))
search()
devtools::document()
devtools::document()
citation()
citation("taxize")
?bibentry
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
devtools::document()
library(mangal)
?mangal
x <- structure(1:10, class = "GB")
x
y <- 1:10
y
class(y)
class(x)
class(x) <- y
class(x)
x
class(x) <- LETTERS
x
baz <- function(x) UseMethod("baz", x)
baz
baz()
baz.A <- function(x) "A"
baz.B <- function(x) "B"
ab <- structure(1, class = c("A", "B"))
ba <- structure(1, class = c("B", "A"))
baz(ab)
baz(ba)
baz.A(ba)
baz.A(ab)
c <- 1:10
baz(c)
mean
class(c)
inherits(c, "integer")
inherits(c, "list")
library(stats4)
# From example(mle)
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
nLL <- function(lambda) - sum(dpois(y, lambda, log = TRUE))
fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
nLL
class(fit)
isS4(fit)
nobs
mle_nobs <- method_from_call(nobs(fit))
isS4(mle_nobs)
getGenerics()
tan(840)
tan(1)
tan(360)
tan(720)
getClasses()
class?ANY
class?mle
class?l
class?lm
class?mle
setClass("Metadata",)
setClass("Metadata",
slots = list(datasets = "list", users = "list"))
Metadata <- c(datasets = as.list(1:10), users = 50)
Metadata
meta <- new("Metadata", datasets = as.list(1:10), users = 50)
meta <- new("Metadata", datasets = as.list(1:10), users = as.list(50))
meta
meta <- new("Metadata", datasets = as.list(1:10))
meta
meta@datasets
meta@datasets[1]
meta@users
setClass("Vehicle")
setClass("Truck", contains = "Vehicle")
setClass("Car", contains = "Vehicle")
setClass("Inspector", representation(name = "character"))
setClass("StateInspector", contains = "Inspector")
setGeneric("inspect.vehicle", function(v, i) {
standardGeneric("inspect.vehicle")
})
setMethod("inspect.vehicle",
signature(v = "Vehicle", i = "Inspector"),
function(v, i) {
message("Looking for rust")
})
setMethod("inspect.vehicle",
signature(v = "Car", i = "Inspector"),
function(v, i) {
callNextMethod() # perform vehicle inspection
message("Checking seat belts")
})
inspect.vehicle(new("Car"), new("Inspector"))
inspect.vehicle(new("Truck"), new("Inspector"))

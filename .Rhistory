standardGeneric("inspect.vehicle")
})
setMethod("inspect.vehicle",
signature(v = "Vehicle", i = "Inspector"),
function(v, i) {
message("Looking for rust")
})
setMethod("inspect.vehicle",
signature(v = "Car", i = "Inspector"),
function(v, i) {
callNextMethod() # perform vehicle inspection
message("Checking seat belts")
})
inspect.vehicle(new("Car"), new("Inspector"))
inspect.vehicle(new("Truck"), new("Inspector"))
a
# Set libraries
library(reshape2)
library(tidyr)
library(jsonlite)
library(httr)
library(data.table)
library(rcrossref)
library(taxize)
library(stringr)
# Set WD
setwd("C:/Users/Dell_Gabriel/Desktop/StageGravel/importation_mangal/Test_Howking_1968")
# Open file
hocking_1968 <- read.csv2(file = "raw/hocking_1968.csv", header = F, stringsAsFactors=F, na.strings = "")
# Cleaning for melt()
## Merge two first COLUMNS Genus species
hocking_1968[is.na(hocking_1968)] <- "sp."
hocking_1968 <- unite(hocking_1968, sp1, c(V1, V2), sep = " ", remove = T)
## Get ROW one with Genus_species
x  <- paste(hocking_1968[1,], sep =" ", hocking_1968[2,])
x[1] <- "species"
colnames(hocking_1968) <- x
## Delete unused row
hocking_1968 <- hocking_1968[-c(1, 2),]
# Melt df
hocking_1968 <- melt(hocking_1968, id.vars = c("species"),na.rm=TRUE)
# Retirer les 0 et ajouter dans la table network edge_list = FALSE
names(hocking_1968) <- c("sp_taxon_1","sp_taxon_2","value")
# table interactions
interactions <- hocking_1968
interactions$value[interactions$value==0] <- "null"
View(interactions)
inter_df <- interactions
## attr_id
inter_df[, "attr_id"] <- GET_fkey("traits", "name", "Toundra")
inter_df[, "attr_id"] <- "test"
View(inter_df)
inter_df[, "attr_id"] <- inter_df[, "value"]
View(inter_df)
View(inter_df)
inter <- list(taxon_1_level = "null", taxon_2_level = "null", date = "null", direction = "null",
type = "null", method = "null", description = "null", coordinates = "")
View(inter)
inter_df[, "taxon_1_level"] <- inter$taxon_1_level
list.1 <- list(c(1:10))
list.2 <- list(c(11:20))
list.3 <- c(list.1, list.2)
View(list.3)
View(list.1)
list.1 <- list(c(1:10), levels(10))
View(list.1)
list.1 <- list(1, 2, 3)
View(list.1)
list.2 <- list(4, 5, 6)
list.3 <- c(list.1, list.2)
View(list.3)
View(list.2)
View(list.3)
list.1 <- list(1, 2, 3)
list.2 <- list(4, 5, 6)
list.1
list.2
list.3 <- c(list.1, list.2)
list.3
View(list.3)
View(list.3)
View(list.3)
list.3 <- merge(list.1, list.2)
View(list.3)
inter
as.data.frame(inter)
inter[rep(1:10),each=3),]
inter[rep(1:10),each=3,]
inter[rep(1:10),]
inter[,rep(10)]
inter[rep(10),]
?cbind
x <- rep(10, 10)
x
inter[inter,rep(10)]
inter<- rep(inter, 10)
inter
unlist(inter)
inter<- rep(inter[,1], 10)
inter<- rep(inter[1,], 10)
inter <- inter[rep(inter[1,], 10),}
inter <- inter[rep(inter[1,], 10),]
inter <- inter[rep(inter[1,], 10)]
inter <- inter[rep(inter, 10),]
inter <- rep(inter[1,], 10)
rbind(setDT(inter), setDT(inter_df), fill = T)
rbind(setDT(inter), setDT(inter_df), fill = T)
exemple <- rbind(setDT(inter), setDT(inter_df), fill = T)
View(exemple)
exemple <- cbind(setDT(inter), setDT(inter_df), fill = T)
View(inter)
inter <- list(taxon_1_level = "null", taxon_2_level = "null", date = "null", direction = "null",
type = "null", method = "null", description = "null", coordinates = "")
inter <- as.data.frame(inter)
inter
exemple <- cbind(setDT(inter), setDT(inter_df), fill = T)
View(exemple)
View(inter_df)
View(inter)
View(exemple)
## Get Unique taxon of data
taxon <- c(as.vector(unique(interactions$sp_taxon_2)), as.vector(unique(interactions$sp_taxon_1)))
## Select only taxa not yet in db
taxons_df <- data.frame()
server <- "http://localhost:3000"
for (i in 1:length(taxon)) {
path <- modify_url(server, path = paste0("/api/v0/","taxons/?name=", str_replace(taxon[i]," ", "%20")))
if (length(content(GET(url = path, config = add_headers("Content-type" = "application/json")))) == 0) {
taxons_df[nrow(taxons_df)+1, 1] <- taxon[i]
}
}
names(taxons_df) <- c("name")
taxons_df[,"name1"] <- NA
View(taxons_df)
## Remove sp
for (i in 1:nrow(taxons_df)) {
if(str_detect(taxons_df[i,1], " sp.") == TRUE){
taxons_df[i,2] <- word(taxons_df[i,1], start = 1)
} else {
taxons_df[i,2] <- taxons_df[i,1]
}
}
View(taxons_df)
# Retrive foreign key <- Pour l'instant qu'un seul trait donc commun a tous
## trait_id
taxons_df[,6] <- GET_fkey("traits", "name", traits[[1]])
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list with json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(typeof(df) != "list"){
stop(" 'df' must be a dataframe")
}
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
return(df)
}
print("json_list extracted")
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
View(inter_df)
# taxon_df as a json list
taxons_lst <- as.list(taxons_df)
View(taxons_lst)
View(taxons_df)
config <- add_headers("Content-type" = "application/json")
config
?setDT
?add_headers
cl()
rm(ls())
ls()
rm(c(ls()))
rm(list= ls())
View(inter)
View(exemple)
View(hocking_1968)
typeof(hocking_1968)
class(hocking_1968)
df <- hocking_1968
# Object df must be a dataframe
if(class(df) != "data.frame"){
stop(" 'df' must be a dataframe")
}
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
?split
for (f in list.files("C:/Users/Dell_Gabriel/Desktop/StageGravel/package/mangal/R", full.names=TRUE)) parse(f)
for (f in list.files("C:\Users\Dell_Gabriel\Desktop\StageGravel\package\mangal\R", full.names=TRUE)) parse(f)
for (f in list.files("C:/Users/Dell_Gabriel/Desktop/StageGravel/package/mangal/R", full.names=TRUE)) parse(f)
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
devtools::document()
library(data.table)
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
View(df)
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
View(df)
View(df)
df <- as.list(hocking_1968)
View(df)
df <- list(sp1 = "abies", sp2 = "acer", type = 1)
View(df)
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
df <- list(sp1 = c("abies", "abies"), sp2 = c("acer", "alnus"), type = c(1, 2))
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
View(df)
View(df)
df <- list(sp1 = c("abies", "abies"), sp2 = c("acer", "alnus"), type = c(1, 2))
View(df)
df <- hocking_1968
View(hocking_1968)
View(df)
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
View(df)
a1 <- list(sp1 = "xyrus", sp2 = "Arnica", value = 1)
a2 <- list(sp1 = "balboa", sp2 = "Betula", value = 2)
df <- list(1 = a1, 2 = a2)
df <- list(a1, a2)
View(df)
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
View(df)
?data.table::split
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list with json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(class(df) != "data.frame"){
stop(" 'df' must be a dataframe")
}
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
return(df)
}
print("json_list extracted")
df <- json_list(hocking_1968)
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list with json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(class(df) != "data.frame"){
stop(" 'df' must be a dataframe")
}
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) {
df[[i]] <- jsonlite::toJSON(df[[i]])
}
return(df)
}
print("json_list extracted")
df <- json_list(hocking_1968)
View(df)
POST_line <- function (table_lst_line, table) {
# Data.line must be of class JSON
if(class(table_lst_line) != "json"){
print(" 'data.line' must be a json")
}
# Connect to API
server <- "http://localhost:3000"
# Set the "table" as path
path <- httr::modify_url(server, path = paste0("/api/v0/",table))
# Post a line of data
httr::POST(path, body = substr(table_lst_line, 2, (nchar(table_lst_line))-1), config = add_headers("Content-type" = "application/json"))
}
print("POST_line extracted")
hocking_1968[[1]]
df[[1]]
users <- [{"name":"test"}]
users <- "[{"name":"test"}]"
users <- c("[{"name":"test"}]")
?gsub
?mangal
?to_json
?mangal::to_json
to_json
?mangal::json_list
?mangal::json_list()
?mangal::json_list
R CMD Rd2pdf C:\Users\Dell_Gabriel\Desktop\StageGravel\package\mangal
http_status(100)
http_status(404)
library(httr)
http_status(100)
http_status(404)
http_status(404)[[3]]
http_status(404)[3]
http_status(200)[3]
devtools::test()
library(testthat)
expect_warning(log(-1))
expect_warning(log(1))
expect_warning(log(-1), "NaNs produced")
log(-1)
expect_error(1 / "a", "non-numeric argument")
expect_error(1 / 2)
?expect_error
test_that("Warning of object other than data frame", {
expect_error(json_list(c(1,2,3)), "'df' must be a dataframe")
})
test_that("Warning of object other than data frame", {
expect_error(json_list(c(1,2,3)), "'df' must be a dataframe")
expect_error(json_list(as.data.frame(c(1:10))), "'df' must be a dataframe")
})
?as.data.frame
?data.frame
data <- data.frame(data = c(1:50), row.names = c(1:5))
data <- data.frame(data = c(1:5), row.names = c(1:5))
View(data)
?matrix
data <- data.frame(matrix(data = c(1:50), ncol = 5))
View(data)
data <- data.frame(matrix(data = c(1:50), ncol = 5, byrow = T))
View(data)
is_a(data)
expect_is(data, "dataframe")
expect_is(data, "data.frame")
test_that("List is in json", {
expect_is(data, "data.frame")
})
test_that("List is in json", {
expect_is(json_list(data), "list")
})
library(mangal)
test_that("List is in json", {
expect_is(json_list(data), "list")
})
?typeof
test_that("List is in json", {
expect_is(json_list(data), "list")
expect_text(typeof(json_list(data))[[1]], "json")
})
roxygen2::roxygenise()
test_that("Warning of object other than data frame", {
expect_error(json_list(c(1,2,3)), "'df' must be a dataframe")
})
data <- data.frame(matrix(data = c(1:50), ncol = 5, byrow = T))
test_that("List is in json", {
expect_is(json_list(data), "list")
expect_text(typeof(json_list(data))[[1]], "json")
})
library(data.table)
test_that("Warning of object other than data frame", {
expect_error(json_list(c(1,2,3)), "'df' must be a dataframe")
})
data <- data.frame(matrix(data = c(1:50), ncol = 5, byrow = T))
test_that("List is in json", {
expect_is(json_list(data), "list")
expect_text(typeof(json_list(data))[[1]], "json")
})
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list of json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(class(df) != "data.frame") stop(" 'df' must be a dataframe")
# Set df into a list with attribute names as levels
df <- as.list(setNames(data.table::split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) df[[i]] <- jsonlite::toJSON(df[[i]])
return(df)
}
print("json_list extracted")
json_list(data)
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list of json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(class(df) != "data.frame") stop(" 'df' must be a dataframe")
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) df[[i]] <- jsonlite::toJSON(df[[i]])
return(df)
}
print("json_list extracted")
json_list(data)
data.table::splt()
data.table::split()
?split
data.table::data.table.split
data
#' @title Dataframe into json list
#'
#' @description Convert a dataframe into a list of json data
#'
#' @param df A dataframe, header must be the names of attributes
#'
#' @return
#'
#' A list of json data, each level of the list is ready for injection in Mangal
#'
#' @author Gabriel Bergeron
#'
#' @keywords manip
#'
#' @importFrom jsonlite toJSON
#' @importFrom data.table split
json_list <- function(df){
# Object df must be a dataframe
if(class(df) != "data.frame") stop(" 'df' must be a dataframe")
# Set df into a list with attribute names as levels
df <- as.list(setNames(split(df, seq(nrow(df))), rownames(df)))
# Set each list level into json
for (i in 1:length(df)) df[[i]] <- jsonlite::toJSON(df[[i]])
return(df)
}
print("json_list extracted")
json_list(data)
test_that("List and dataframe lenght equal", {
expect_equal(length(json_list(data)), length(data))
})
data
test_that("List and dataframe length equal", {
expect_equal(length(json_list(data)), nrow(data))
})

## Create and inject datasets table ##
POST_datasets <- function(){
# Check if the datasets already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","datasets/?name=",
datasets[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[[1]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?doi=", refs[[1]])), config = config))) != 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", "doi", refs[[1]]))
}
# Datasets_df as a json list
datasets_lst <- json_list(data.frame(datasets))
# Inject  to datasets table
POST_table(datasets_lst, "datasets")
print("datasets done")
} else {
print("dataset already in mangal")
}
}
#' @title POST data in the Mangal interactions table
#'
#' @description GET foreign keys needed for the 'interactions' table then POST
#'    the metadata associated. 'attributes', 'environments', 'networks', 'refs'
#'    and 'users' tables must be POST before.
#'
#' @param inter_df A dataframe with three columns: taxon_1, taxon_2 and value
#'
#' @return
#'
#' The status of the injection:
#' 'interactions done' an id has been created for each interactions and the
#' injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom data.table setDT
# Create and inject interactions table ##
POST_interactions <- function(inter_df){
# Retrive foreign keys
## taxon_1 & taxon_2
inter_df[, "taxon_1"] <- NA
inter_df[, "taxon_2"] <- NA
for (i in 1:nrow(inter_df)) {
try(inter_df[i, "taxon_1"] <- GET_fkey("taxons", "name", inter_df[i,1]))
try(inter_df[i, "taxon_2"] <- GET_fkey("taxons", "name", inter_df[i,2]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/attributes/?name=", attr[[1]])), config = config))) != 0){
inter_df[, "attr_id"]        <- GET_fkey("attributes", "name", attr[[1]])
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/environments/?name=", enviro[[1]])), config = config))) != 0){
inter_df[, "environment_id"] <- GET_fkey("environments", "name", enviro[[1]])
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/networks/?name=", networks[[1]])), config = config))) != 0){
inter_df[, "network_id"]     <- GET_fkey("networks", "name", networks[[1]])
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?doi=", refs[[1]])), config = config))) != 0){
inter_df[, "ref_id"]         <- GET_fkey("refs", "doi", refs[[1]])
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])), config = config))) != 0){
inter_df[, "user_id"]        <- GET_fkey("users", "name", users[[1]])
}
# Remove unused column
inter_df <- inter_df[,3:ncol(inter_df)]
# Add metadata
inter_df <- cbind(data.table::setDT(inter_df),
data.table::setDT(as.data.frame(inter)))
# inter_df as a json list
inter_lst <- json_list(inter_df)
# Inject to interactions table
POST_table(inter_lst, "interactions")
print("interactions done")
}
#' @title POST data into the Mangal networks table
#'
#' @description GET foreign keys needed for the 'networks' table then POST the
#'  metadata associated. 'environments', 'users', 'datasets' and 'refs' tables
#'  must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'network already in mangal' means that the environment name already have an
#' id
#' 'network done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
### BUG : ne saisie pas datasets_id ###
## Create and inject networks table ##
POST_networks <- function(){
# Check if the networks already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","networks/?name=",
networks[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/datasets/?name=", datasets[[1]])), config = config))) != 0){
networks <- c(networks, dataset_id = GET_fkey("datasets", "name", datasets[[1]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?doi=", refs[[1]])), config = config))) != 0){
networks <- c(networks, ref_id = GET_fkey("refs", "doi", refs[[1]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/environments/?name=", enviro[[1]])), config = config))) != 0){
networks <- c(networks, environment_id = GET_fkey("environments", "name", enviro[[1]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])), config = config))) != 0){
networks <- c(networks, user_id = GET_fkey("users", "name", users[[1]]))
}
# networks_df as a json list
networks_lst <- json_list(data.frame(networks))
# Inject to networks table
POST_table(networks_lst, "networks")
print("network done")
} else {
print("network already in mangal")
}
}
#' @title POST data into the Mangal taxons table
#'
#' @description GET foreign keys needed for the 'taxons' table then POST
#'    the metadata associated. 'traits' table must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'taxon done' ids have been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
## Create and inject taxons table ##
POST_taxons <- function(){
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", trait[[1]])), config = config))) != 0){
taxons_df[,6] <- GET_fkey("traits", "name", traits[[1]])
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
# Inject to networks table
POST_table(taxons_lst, "taxons")
print("taxon done")
}
#' @title POST data into the Mangal traits table
#'
#' @description GET foreign keys needed for the 'traits' table then POST
#'    the metadata associated. 'attributes' and 'refs' tables must be POST
#'    before.
#'
#' @return
#'
#' The status of the injection:
#' 'trait already in mangal' means that the environment name already have an
#' id
#' 'trait done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
## Create and inject traits table ##
POST_traits <- function(){
# Check if the traits already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","traits/?name=",
traits[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/attributes/?name=", attr[[1]])), config = config))) != 0){
traits <- c(traits, attr_id = GET_fkey("attributes", "name", attr[[1]]))
}
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?doi=", attr[[1]])), config = config))) != 0){
traits <- c(traits, ref_id = GET_fkey("refs", "doi", refs[[1]]))
}
# traits_df as a json list
traits_lst <- json_list(data.frame(traits))
# Inject to traits table
POST_table(traits_lst, "traits")
print("trait done")
} else {
print("trait already in mangal")
}
}
# Set libraries
library(reshape2)
library(tidyr)
#library(jsonlite)
#library(httr)
library(data.table)
library(rcrossref)
library(taxize)
library(stringr)
library(httr)
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
attr <- list(name        = "Visit of an insect to a flower",
table_owner = "Howking_1968",
description = "Recorded activity : ambush; basking; flying over; hidden in;
courting; nectar feeding; ovipositing; pollen feeding or collecting;
resting or uncertain",
unit        = "null")
refs <- list(doi   = "0.2307/3565022",
jstor = "null",
pmid  = "null",
url   = "http://www.jstor.org/stable/3565022")
users <- list(name         = "Gabriel Bergeron",
email        = "gabriel.bergeron3@usherbrooke.ca",
orcid        = "null",
organization = "UniversitÃ© de Sherbrooke",
type         = "administrator")
datasets <- list(name        = "Howking_1968",
date        = "1963-06-01",
description = "Insect activity recorded on flower at Lake Hazen, Ellesmere Island, N.W.T., Canada",
public      = TRUE)
traits <- list(name        = "NAME",
date        = "1111-11-11",
value       = 0,
description = "null")
networks <- list(name         = "NAME",
date         = "1968-06-01",
#                 localisation = "[81.816667, -71.3, 2029]",
description  = "null",
public       = FALSE)
inter <- list(taxon_1_level = "individual",
taxon_2_level = "individual",
date          = "1968-06-01",
direction     = "directed",
type          = "null",
method        = "Field observations",
description   = "Visit of an insect to a flower",
public        = FALSE,
localisation  = "[10, 10, 2029]")
metadata <- list(attributes   = attr,
refs         = refs,
users        = users,
environments = enviro,
datasets     = datasets,
interactions = inter )
# Set WD
setwd("C:/Users/Dell_Gabriel/Desktop/StageGravel/importation_mangal/Test_Hocking_1968")
# Open file
hocking_1968 <- read.csv2(file = "raw/hocking_1968.csv", header = FALSE, stringsAsFactors = FALSE, na.strings = "")
# Cleaning for melt()
## Merge two first COLUMNS Genus species
hocking_1968[is.na(hocking_1968)] <- "sp."
hocking_1968 <- unite(hocking_1968, sp1, c(V1, V2), sep = " ", remove = TRUE)
## Get ROW one with Genus_species
x  <- paste(hocking_1968[1, ], sep =" ", hocking_1968[2, ])
x[1] <- "species"
colnames(hocking_1968) <- x
rm(x)
## Delete unused row
hocking_1968 <- hocking_1968[-c(1, 2), ]
# Melt df
hocking_1968 <- melt(hocking_1968, id.vars = c("species"), na.rm = TRUE)
# Retirer les 0 et ajouter dans la table network edge_list = FALSE
names(hocking_1968) <- c("sp_taxon_1", "sp_taxon_2", "value")
# API require 0 to be null
hocking_1968$value[hocking_1968$value == 0] <- "null"
taxons_df <- read.csv2("data/hocking_1968_taxons.csv", header = TRUE)
#------------------------------
# Throwing injection functions
#------------------------------
POST_attributes()
POST_refs()
POST_users()
#POST_environments()
POST_datasets()
POST_traits()
POST_networks()
POST_taxons()
#' @title POST data into the Mangal taxons table
#'
#' @description GET foreign keys needed for the 'taxons' table then POST
#'    the metadata associated. 'traits' table must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'taxon done' ids have been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
## Create and inject taxons table ##
POST_taxons <- function(){
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[,6] <- GET_fkey("traits", "name", traits[[1]])
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
# Inject to networks table
POST_table(taxons_lst, "taxons")
print("taxon done")
}
taxons_df <- taxons_df[, -1]
View(taxons_df)
#' @title POST data into the Mangal taxons table
#'
#' @description GET foreign keys needed for the 'taxons' table then POST
#'    the metadata associated. 'traits' table must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'taxon done' ids have been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
## Create and inject taxons table ##
POST_taxons <- function(){
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[,ncol(taxons_df)+1] <- GET_fkey("traits", "name", traits[[1]])
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
# Inject to networks table
POST_table(taxons_lst, "taxons")
print("taxon done")
}
POST_taxons()
#' @title POST data into the Mangal taxons table
#'
#' @description GET foreign keys needed for the 'taxons' table then POST
#'    the metadata associated. 'traits' table must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'taxon done' ids have been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
## Create and inject taxons table ##
POST_taxons <- function(){
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[,7] <- GET_fkey("traits", "name", traits[[1]])
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
# Inject to networks table
POST_table(taxons_lst, "taxons")
print("taxon done")
}
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
POST_taxons()
content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))
length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0
taxons_df[,7] <- GET_fkey("traits", "name", traits[[1]])
taxons_lst <- json_list(taxons_df)
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
# Inject to networks table
POST_table(taxons_lst, "taxons")
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[, "trait_id"] <- GET_fkey("traits", "name", traits[[1]])
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
# Inject to networks table
POST_table(taxons_lst, "taxons")
taxons_df <- read.csv2("data/hocking_1968_taxons.csv", header = TRUE)
taxons_df <- taxons_df[, -1]
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[, "trait_id"] <- GET_fkey("traits", "name", traits[[1]])
}
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
# Inject to networks table
POST_table(taxons_lst, "taxons")
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
summary(taxons_df$trait_id)
# Retrive foreign key
## trait_id
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/traits/?name=", traits[[1]])), config = config))) != 0){
taxons_df[, "trait_id"] <- as.numeric(GET_fkey("traits", "name", traits[[1]]))
}
summary(taxons_df$trait_id)
View(taxons_df)
# taxon_df as a json list
taxons_lst <- json_list(taxons_df)
View(taxons_lst)
# Inject to networks table
POST_table(taxons_lst, "taxons")
for (i in 1:1000) {
DELETE( url = paste0("http://localhost:3000/api/v0/taxon/", i))
}
# Set WD
setwd("C:/Users/Dell_Gabriel/Desktop/StageGravel/importation_mangal/Test_Hocking_1968")
# Open file
hocking_1968 <- read.csv2(file = "raw/hocking_1968.csv", header = FALSE, stringsAsFactors = FALSE, na.strings = "")
View(hocking_1968)
# Cleaning for melt()
## Merge two first COLUMNS Genus species
hocking_1968[is.na(hocking_1968)] <- "sp."
hocking_1968 <- unite(hocking_1968, sp1, c(V1, V2), sep = " ", remove = TRUE)
## Get ROW one with Genus_species
x  <- paste(hocking_1968[1, ], sep =" ", hocking_1968[2, ])
x[1] <- "species"
colnames(hocking_1968) <- x
rm(x)
## Delete unused row
hocking_1968 <- hocking_1968[-c(1, 2), ]
# Melt df
hocking_1968 <- melt(hocking_1968, id.vars = c("species"), na.rm = TRUE)
# Retirer les 0 et ajouter dans la table network edge_list = FALSE
names(hocking_1968) <- c("sp_taxon_1", "sp_taxon_2", "value")
# API require 0 to be null
hocking_1968$value[hocking_1968$value == 0] <- "null"
View(hocking_1968)
View(taxons_df)
View(taxons_df)
taxons_df[1:5, "name"]
taxons_df[1:5, name]
taxons_df[1, name]
taxons_df[1, "name"]
taxons_df[1, "name"][1]
a <- taxons_df[1, "name"]
a
a[1]
paste0(a, "b")
paste0(taxons_df["name", 1]
)
paste0(taxons_df[,1 "name"]
paste0(taxons_df[1, "name"]
)
paste0(taxons_df[1, "name"], " is not in taxo_backbone, entry was skip")
a <- names(taxons_df)
a
a[2] <- "name_clear"
a
names(taxons_df) <- a
names(taxons_df)
taxons_df <- taxons_df[1:2,]
View(inter_df)
View(taxons_df)
taxons_df <- read.csv2("data/hocking_1968_taxons.csv", header = TRUE)
taxons_df <- taxons_df[,1:2]
taxons_df <- read.csv2("data/hocking_1968_taxons.csv", header = TRUE)
taxons_df <- taxons_df[,-1]
View(taxons_df)
names(taxons_df) <- a
names(taxons_df) <- a[-7]
taxons_df <- taxons_df[,1:2]
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
# Get taxo_ id from taxo_back table
for (i in 1:nrow(taxons_df)) {
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/taxo_back/?name=", taxons_df[i, "name_clear"])), config = config))) != 0){
print(paste0(taxons_df[i, "name"], " is not in taxo_backbone, entry was skip"))
} else {
taxons_df[i, "id_sp"] <- GET_fkey("taxo_back", "name", taxons_df[i, "name_clear"])
}
}
taxo_back_df <- read.csv2("data/hocking_1968_taxons.csv", header = TRUE)
taxo_back_df <- taxo_back_df[,-1]
View(taxo_back_df)
taxo_back_df <- taxo_back_df[,-2]
# taxon_df as a json list
taxo_back_lst <- json_list(taxo_back_df)
# Inject to networks table
POST_table(taxo_back_lst, "taxo_back")

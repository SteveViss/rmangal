}
#POST_environments()
POST_datasets()
#' @title POST data into the Mangal traits table
#'
#' @description GET foreign keys needed for the 'traits' table then POST
#'    the metadata associated. 'attributes' and 'refs' tables must be POST
#'    before.
#'
#' @return
#'
#' The status of the injection:
#' 'trait already in mangal' means that the environment name already have an
#' id
#' 'trait done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
## Create and inject traits table ##
POST_traits <- function(){
# Check if the traits already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","traits/?name=",
traits[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
traits <- c(traits, attr_id = GET_fkey("attributes", "name", attr[[1]]))
traits <- c(traits, ref_id = GET_fkey("refs", "doi", refs[[1]]))
# traits_df as a json list
traits_lst <- json_list(data.frame(traits))
# Inject to traits table
POST_table(traits_lst, "traits")
print("trait done")
} else {
print("trait already in mangal")
}
}
POST_traits()
#' @title POST data into the Mangal networks table
#'
#' @description GET foreign keys needed for the 'networks' table then POST the
#'  metadata associated. 'environments', 'users', 'datasets' and 'refs' tables
#'  must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'network already in mangal' means that the environment name already have an
#' id
#' 'network done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
### BUG : ne saisie pas datasets_id ###
## Create and inject networks table ##
POST_networks <- function(){
# Check if the networks already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","networks/?name=",
networks[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
networks <- c(networks, dataset_id = GET_fkey("datasets", "name",
datasets[[1]]))
networks <- c(networks, ref_id = GET_fkey("refs", "doi", refs[[1]]))
networks <- c(networks, environment_id = GET_fkey("environments",
"name", enviro[[1]]))
networks <- c(networks, user_id = GET_fkey("users", "name", users[[1]]))
# networks_df as a json list
networks_lst <- json_list(data.frame(networks))
# Inject to networks table
POST_table(networks_lst, "networks")
print("network done")
} else {
print("network already in mangal")
}
}
POST_networks()
?try
networks
POST_networks()
Q
#' @title POST data into the Mangal networks table
#'
#' @description GET foreign keys needed for the 'networks' table then POST the
#'  metadata associated. 'environments', 'users', 'datasets' and 'refs' tables
#'  must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'network already in mangal' means that the environment name already have an
#' id
#' 'network done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
### BUG : ne saisie pas datasets_id ###
## Create and inject networks table ##
POST_networks <- function(){
# Check if the networks already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","networks/?name=",
networks[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
networks <- c(networks, dataset_id = GET_fkey("datasets", "name",
datasets[[1]]))
networks <- c(networks, ref_id = GET_fkey("refs", "doi", refs[[1]]))
try(exp = networks <- c(networks, environment_id = GET_fkey("environments",
"name", enviro[[1]])))
networks <- c(networks, user_id = GET_fkey("users", "name", users[[1]]))
# networks_df as a json list
networks_lst <- json_list(data.frame(networks))
# Inject to networks table
POST_table(networks_lst, "networks")
print("network done")
} else {
print("network already in mangal")
}
}
POST_networks()
enviro
#' @title POST data into the Mangal networks table
#'
#' @description GET foreign keys needed for the 'networks' table then POST the
#'  metadata associated. 'environments', 'users', 'datasets' and 'refs' tables
#'  must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'network already in mangal' means that the environment name already have an
#' id
#' 'network done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
### BUG : ne saisie pas datasets_id ###
## Create and inject networks table ##
POST_networks <- function(){
# Check if the networks already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","networks/?name=",
networks[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
networks <- c(networks, dataset_id = GET_fkey("datasets", "name",
datasets[[1]]))
networks <- c(networks, ref_id = GET_fkey("refs", "doi", refs[[1]]))
networks <- c(networks, environment_id = GET_fkey("environments",
"name", enviro[[1]]))
networks <- c(networks, user_id = GET_fkey("users", "name", users[[1]]))
# networks_df as a json list
networks_lst <- json_list(data.frame(networks))
# Inject to networks table
POST_table(networks_lst, "networks")
print("network done")
} else {
print("network already in mangal")
}
}
POST_networks()
networks
networks <- list(name         = "NAME",
date         = "1968-06-01",
# localisation = "[81.816667, -71.3, 2029]",
description  = "null",
public       = FALSE)
networks
POST_networks()
POST_networks()
POST_networks()
networks <- list(name         = "NAME",
date         = "1968-06-01",
localisation = "[81.816667, -71.3, 2029]",
description  = "null",
public       = FALSE)
POST_networks()
networks <- list(name         = "NAME",
date         = "1968-06-01",
#                 localisation = "[81.816667, -71.3, 2029]",
description  = "null",
public       = FALSE)
POST_networks()
POST_taxons()
POST_interactions(hocking_1968)
#' @title GET id key from a Mangal entry
#'
#' @description GET primary key of a table entry specified by the user
#'
#' @param table A element, must be the name of the targeted table with ""
#' @param attribute A element, must be the name of the targeted attribute with ""
#' @param value A element, must be the value of the targeted attribute with ""
#'
#' @return
#'
#' The value of the primary key of a specified entry
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr content
GET_fkey <- function(table, attribute, value){
# Connect to API
server <- "http://localhost:3000"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
if(is.null(data[[1]])) print("wrong attribute, check spelling; value or table inexistant, no associated id")
else return(data[[1]])
}
#' @title POST data into the Mangal networks table
#'
#' @description GET foreign keys needed for the 'networks' table then POST the
#'  metadata associated. 'environments', 'users', 'datasets' and 'refs' tables
#'  must be POST before.
#'
#' @return
#'
#' The status of the injection:
#' 'network already in mangal' means that the environment name already have an
#' id
#' 'network done' an id has been created and the injection is succesfull
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr add_headers
### BUG : ne saisie pas datasets_id ###
## Create and inject networks table ##
POST_networks <- function(){
# Check if the networks already exist
server <- "http://localhost:3000"
config <- httr::add_headers("Content-type" = "application/json")
path <- httr::modify_url(server, path = paste0("/api/v0/","networks/?name=",
networks[[1]]))
# Change space in url by "_"
path <- gsub(" ", "%20", path)
# Is retreived content == 0 -> in this case inject data
if (length(content(httr::GET(url = path, config = config))) == 0) {
# Retrive foreign key
networks <- c(networks, dataset_id = GET_fkey("datasets", "name",
datasets[[1]]))
networks <- c(networks, ref_id = GET_fkey("refs", "doi", refs[[1]]))
networks <- c(networks, environment_id = GET_fkey("environments",
"name", enviro[[1]]))
networks <- c(networks, user_id = GET_fkey("users", "name", users[[1]]))
# networks_df as a json list
networks_lst <- json_list(data.frame(networks))
# Inject to networks table
POST_table(networks_lst, "networks")
print("network done")
} else {
print("network already in mangal")
}
}
networks
POST_networks()
View(taxon_df)
rm(taxon_df)
View(taxons_df)
inter_df <- taxons_df
# Retrive foreign keys
## taxon_1 & taxon_2
inter_df[, "taxon_1"] <- NA
inter_df[, "taxon_2"] <- NA
for (i in 1:nrow(inter_df)) {
try(inter_df[i, "taxon_1"] <- GET_fkey("taxons", "name", inter_df[i,1]))
try(inter_df[i, "taxon_2"] <- GET_fkey("taxons", "name", inter_df[i,2]))
}
View(inter_df)
View(hocking_1968)
inter_df <- hocking_1968
View(inter_df)
# Retrive foreign keys
## taxon_1 & taxon_2
inter_df[, "taxon_1"] <- NA
inter_df[, "taxon_2"] <- NA
for (i in 1:nrow(inter_df)) {
try(inter_df[i, "taxon_1"] <- GET_fkey("taxons", "name", inter_df[i,1]))
try(inter_df[i, "taxon_2"] <- GET_fkey("taxons", "name", inter_df[i,2]))
}
View(inter_df)
inter_df[, "attr_id"]        <- GET_fkey("traits", "name", attr[[1]])
attr[[1]]
GET_fkey
View(inter_df)
table <- "traits"
attributes <- "name"
value <- attr[[1]]
# Connect to API
server <- "http://localhost:3000"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
attributes <- "name"
attribute <- "name"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data
data <- httr::content(data)
data
# Get data into vector
data <- unlist(data)
data
attr[[1]]
View(users)
url <- httr::modify_url(server, path = "/api/v0/attributes/?name=Visit of an insect to a flower")
# Change space in url by "_"
url <- gsub(" ", "%20", url)
url
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
data
if(is.null(data[[1]])) print("wrong attribute, check spelling; value or table inexistant, no associated id")
else return(data[[1]])
data[[1]]
if(is.null(data[[1]])) print("wrong attribute, check spelling; value or table inexistant, no associated id")
else return(data[[1]])
if(is.null(data[[1]] == TRUE)){ print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else return(data[[1]])
if(is.null(data[[1]] == TRUE)){ print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else {return(data[[1]])}
?return
data[[1]]
#' @title GET id key from a Mangal entry
#'
#' @description GET primary key of a table entry specified by the user
#'
#' @param table A element, must be the name of the targeted table with ""
#' @param attribute A element, must be the name of the targeted attribute with ""
#' @param value A element, must be the value of the targeted attribute with ""
#'
#' @return
#'
#' The value of the primary key of a specified entry
#'
#' @author Gabriel Bergeron
#'
#' @keywords database
#'
#' @importFrom httr modify_url
#' @importFrom httr GET
#' @importFrom httr content
GET_fkey <- function(table, attribute, value){
# Connect to API
server <- "http://localhost:3000"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
if(is.null(data[[1]] == TRUE)){ print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else {
return(data[[1]])
}
}
inter_df[, "attr_id"]        <- GET_fkey("traits", "name", attr[[1]])
inter_df[, "attr_id"]        <- GET_fkey("traits", "name", attr[[1]])
View(inter_df)
inter_df[, "attr_id"] <- GET_fkey("traits", "name", attr[[1]])
GET_fkey("traits", "name", attr[[1]])
GET_fkey("trait", "name", attr[[1]])
table <- "traits"
attribute <- "name"
value <- attr[[1]]
# Connect to API
server <- "http://localhost:3000"
# Set the table and name as path
url <- httr::modify_url(server, path = paste0("/api/v0/", table, "?", attribute, "=", value))
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
if(is.null(data[[1]] == TRUE)){
print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else {
return(data[[1]])
}
if(is.null(data[[1]] == TRUE)){
print("wrong attribute, check spelling; value or table inexistant, no associated id")
} else {
print(data[[1]])
}
Visit of an insect to a flower"
attr[[1]]
# Connect to API
server <- "http://localhost:3000"
url <- httr::modify_url(server, path = "/api/v0/traits/?=Visit of an insect to a flower")
# Change space in url by "_"
url <- gsub(" ", "%20", url)
# Retreive data from Mangal
data <- httr::GET(url)
data <- httr::content(data)
# Get data into vector
data <- unlist(data)
data
inter_df[, "attr_id"]        <- GET_fkey("attributes", "name", attr[[1]])
inter_df[, "environment_id"] <- GET_fkey("environments", "name", enviro[[1]])
inter_df[, "network_id"]     <- GET_fkey("networks", "name", networks[[1]])
View(inter_df)
inter_df[, "ref_id"]         <- GET_fkey("refs", "doi", refs[[1]])
inter_df[, "user_id"]        <- GET_fkey("users", "name", users[[1]])
POST_networks()
inter_df[, "network_id"]     <- GET_fkey("networks", "name", networks[[1]])
GET_fkey
# Remove unused column
inter_df <- inter_df[,3:ncol(inter_df)]
# Add metadata
inter_df <- cbind(data.table::setDT(inter_df),
data.table::setDT(as.data.frame(inter)), fill = T)
inter_df <- inter_df[, -16]
View(inter_df)
# inter_df as a json list
inter_lst <- json_list(inter_df)
class(inter_df)
as.data.frame(inter_df)
inter_df <- as.data.frame(inter_df)
class(inter_df)
# inter_df as a json list
inter_lst <- json_list(inter_df)
View(inter_lst)
# Inject to interactions table
POST_table(inter_lst, "interactions")
inter_df
class(inter_df)
path
paste0(server, "/api/v0/users/?name=", users[[1]])
gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])
)
datasets
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[[1]]))
}
datasets
datasets <- list(name        = "Howking_1968",
date        = "1963-06-01",
description = "Insect activity recorded on flower at Lake Hazen, Ellesmere Island, N.W.T., Canada",
public      = TRUE)
datasets
# Retrive foreign key
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/users/?name=", users[[1]])), config = config))) != 0){
datasets <- c(datasets, user_id = GET_fkey("users","name", users[[1]]))
}
datasets
if (length(content(httr::GET(url = gsub(" ", "%20", paste0(server, "/api/v0/refs/?doi=", users[[1]])), config = config))) == 0){
datasets <- c(datasets, ref_id = GET_fkey("refs", "doi", refs[[1]]))
}
datasets
